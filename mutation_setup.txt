The Mutation setup is similar to the RootQuery setup. You basically set up a name for the Mutation.
You then set the fields to include each mutation. e.g. addAuthor. Inside the mutation, you set up the type - in this case, the AuthorType.
You then setup the args that you'll pass to the mutation e.g name, age. You define those types GraphQLString, GraphQLInt.
Again, you use the resolve function to communicate with the database to mutate the data.

You then export the Mutation with the RootQuery.


/*

-- MUTATION SETUP --

const Mutation = new GraphQLObjectType({
    name: 'Mutation',
    fields: {
        addAuthor: {
            type: AuthorType,
            args: {
                name: { type: GraphQLString },
                age: { type: GraphQLInt }
            },
            resolve(parent, args){
                let author = new Author({
                    name: args.name,
                    age: args.age
                });
                return author.save();
            }
        },
        addBook: {
            type: BookType,
            args: {
                name: { type: new GraphQLNonNull(GraphQLString) },
                genre: { type: new GraphQLNonNull(GraphQLString) },
                authorId: { type: new GraphQLNonNull(GraphQLID) }
            },
            resolve(parent, args){
                let book = new Book({
                    name: args.name,
                    genre: args.genre,
                    authorId: args.authorId
                });
                return book.save();
            }
        }
    }
});

module.exports = new GraphQLSchema({
    query: RootQuery,
    mutation: Mutation
});


*/
